{
  "address": "0xe9b628C66F90790C5C1A646DFcC17c99eACeC410",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ClaimMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ClaimMintReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heat",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "name": "DegreeHeats",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UserReceive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserUnWithDrawEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserWithDrawEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FoundationAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Receive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_withdrawAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_totalUnwithdrawAmounts",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "SetUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeMinters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addSpendNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_number",
          "type": "string"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayReceivedAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daySupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayUnStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "degreeHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destructions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_number",
          "type": "string"
        }
      ],
      "name": "getClaimTsAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "count",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEarthDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destruction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "foundation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalclaimMints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedMesh",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxHeats",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sinceGenesis",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "launchData",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_genesisTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_received",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_staked",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unstaked",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_userTotalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userUnWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpendNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revenue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalApy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEarnValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offEarthStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_apy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_foundationAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMeshHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rankWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNGPStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalUnWithDraws",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalWithDraws",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unWithDrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unWithdraws",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userApplys",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userMints",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "updateTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNumbers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWithdraws",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "validSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65be05cf9ae7353bcdd2dfd1ca67b9d6106ff0b254d162e9c3f3e3f833160099",
  "receipt": {
    "to": null,
    "from": "0x843076428Df85c8F7704a2Be73B0E1b1D5799D4d",
    "contractAddress": "0xe9b628C66F90790C5C1A646DFcC17c99eACeC410",
    "transactionIndex": 2,
    "gasUsed": "3062946",
    "logsBloom": "0x00000000000000020000000002000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000001000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xe5f8043ed550bd215fd3831a0f83958e85fabdd1db070ae74f045ef203fa8851",
    "transactionHash": "0x65be05cf9ae7353bcdd2dfd1ca67b9d6106ff0b254d162e9c3f3e3f833160099",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 37752130,
        "transactionHash": "0x65be05cf9ae7353bcdd2dfd1ca67b9d6106ff0b254d162e9c3f3e3f833160099",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000843076428df85c8f7704a2be73b0e1b1d5799d4d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000570ddd7fa1928200000000000000000000000000000000000000000000000004985b8a3de3edd40000000000000000000000000000000000000000000020afb0daaf70a3ca7f3100000000000000000000000000000000000000000000000004414dacbe425b520000000000000000000000000000000000000000000020afb131bd4e236c11b3",
        "logIndex": 5,
        "blockHash": "0xe5f8043ed550bd215fd3831a0f83958e85fabdd1db070ae74f045ef203fa8851"
      }
    ],
    "blockNumber": 37752130,
    "cumulativeGasUsed": "3161649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a2e0944197ab673877bffb6add06774a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimMintReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"DegreeHeats\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserUnWithDrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithDrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FoundationAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Receive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnwithdrawAmounts\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"SetUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addSpendNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_number\",\"type\":\"string\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayReceivedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayUnStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"degreeHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_number\",\"type\":\"string\"}],\"name\":\"getClaimTsAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarthDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destruction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalclaimMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMesh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchData\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_genesisTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_received\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_staked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unstaked\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userUnWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpendNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offEarthStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_foundationAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMeshHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rankWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNGPStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUnWithDraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithDraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unWithDrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userApplys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userMints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"updateTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNumbers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"validSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NGP.sol\":\"NGP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/NGP.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\ncontract NGP is ERC20Upgradeable {\\n    struct MintInfo {\\n        address user;\\n        string number;\\n        uint256 updateTs;\\n        uint256 withdrawTs;\\n    }\\n\\n    uint256 public daySupply;\\n\\n    mapping(address => mapping(string => MintInfo)) public userMints;\\n\\n    mapping(string => address[]) public userApplys;\\n\\n    mapping(string => uint256) public degreeHeats;\\n\\n    mapping(address => string[]) public userNumbers;\\n\\n    mapping(address => uint256) public withdrawAmount;\\n\\n    mapping(address => uint256) public unWithDrawAmount;\\n\\n    mapping(address => uint256) public rankWithdrawAmount;\\n\\n    mapping(address => bool) private minters;\\n\\n    uint256 private spendNonce;\\n\\n    mapping(address => bool) private isOwner;\\n\\n    address[] private owners;\\n\\n    uint256 private required;\\n\\n    uint256 public genesisTs;\\n\\n    uint256 public activeMinters;\\n\\n    uint256 public activeNumbers;\\n\\n    uint256 public claimMints;\\n\\n    uint256 public maxMeshHeats;\\n\\n    uint256 public destructions;\\n\\n    uint256 public SECONDS_IN_DAY;\\n\\n    struct StakeInfo {\\n        uint256 term;\\n        uint256 maturityTs;\\n        uint256 amount;\\n    }\\n\\n    uint256 public apy;\\n\\n    uint256 public activeStakes;\\n    uint256 public totalNGPStaked;\\n\\n    uint256 public totalEarn;\\n\\n    mapping(address => StakeInfo) public userStakes;\\n\\n    mapping(uint256 => uint256) public dayClaims;\\n\\n    mapping(uint256 => bool) public dayClaimed;\\n\\n    uint256 public treasuryValue;\\n\\n    address public FoundationAddr;\\n\\n    mapping(address => uint256) public stakeValues;\\n\\n    //\\u5f53\\u65e5\\u94f8\\u9020NGP\\n    mapping(uint256 => uint256) public dayReceived;\\n\\n    //\\u5f53\\u65e5\\u8d28\\u62bcNGP\\n    mapping(uint256 => uint256) public dayStaked;\\n\\n    //\\u5f53\\u65e5\\u89e3\\u9501NGP\\n    mapping(uint256 => uint256) public dayUnStaked;\\n\\n    mapping(address => uint256) public unWithdraws;\\n\\n    mapping(address => uint256) public userWithdraws;\\n\\n    mapping(string => mapping(address => uint256)) public totalWithDraws;\\n    mapping(string => mapping(address => uint256)) public totalUnWithDraws;\\n\\n    mapping(address => mapping(uint256 => bool)) public dayReceivedAmount;\\n\\n    event ClaimMint(address user, string number, uint256 time);\\n\\n    event ClaimMintReward(address user, string number, uint256 time);\\n\\n    event Staked(address indexed user, uint256 amount, uint256 term);\\n\\n    event Withdrawn(address indexed user, uint256 amount, uint256 reward);\\n\\n    event DegreeHeats(string number, uint256 heat, uint256 len);\\n\\n    event UserWithDrawEvent(string number, uint256 amount);\\n\\n    event UserUnWithDrawEvent(string number, uint256 amount);\\n\\n    event UserReceive(address user);\\n\\n    modifier isOnlyOwner() {\\n        require(isOwner[msg.sender], \\\"not owner\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address[] calldata _owners,\\n        uint256 _apy,\\n        address _foundationAddr\\n    ) external initializer {\\n        __ERC20_init(\\\"TERA Token\\\", \\\"TERA\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            //onwer should be distinct, and non-zero\\n            address _owner = _owners[i];\\n            if (isOwner[_owner] || _owner == address(0x0)) {\\n                revert();\\n            }\\n\\n            isOwner[_owner] = true;\\n            owners.push(_owner);\\n        }\\n\\n        required = _owners.length / 2 + 1;\\n\\n        SECONDS_IN_DAY = 3_600 * 24;\\n\\n        genesisTs = block.timestamp;\\n\\n        apy = _apy;\\n\\n        FoundationAddr = _foundationAddr;\\n    }\\n\\n    function claimMint(string memory _number) external {\\n        MintInfo memory mintInfo = userMints[msg.sender][_number];\\n\\n        require(mintInfo.updateTs == 0, \\\"mNGP: Mint already in progress\\\");\\n\\n        uint256 _len = userApplys[_number].length;\\n        if (_len != 0) {\\n            uint256 _amount = degreeHeats[_number] / 10;\\n            destructions += _amount;\\n            if (_amount > 0) {\\n                _burn(msg.sender, _amount);\\n            }\\n        } else {\\n            activeNumbers++;\\n        }\\n\\n        mintInfo.number = _number;\\n        mintInfo.user = msg.sender;\\n        mintInfo.updateTs = block.timestamp;\\n        mintInfo.withdrawTs = block.timestamp;\\n        userMints[msg.sender][_number] = mintInfo;\\n\\n        userApplys[_number].push(msg.sender);\\n\\n        //\\u5e73\\u5747\\u6536\\u76ca\\u503c: 864,000 / 12,960,000,0 = 0.0006667\\n        uint256 _n = userApplys[_number].length;\\n\\n        uint256 _degreeHeats = (6667 * 106 ** _n * 10 ** 11) / (100 ** _n);\\n        //6667 * 106 ** _n * 10 ** 11 / (100 ** _n);\\n\\n        degreeHeats[_number] = _degreeHeats;\\n\\n        emit DegreeHeats(_number, _degreeHeats, _n);\\n\\n        if (_degreeHeats > maxMeshHeats) {\\n            maxMeshHeats = _degreeHeats;\\n        }\\n\\n        userNumbers[msg.sender].push(_number);\\n\\n        if (!minters[msg.sender]) {\\n            activeMinters++;\\n\\n            minters[msg.sender] = true;\\n        }\\n\\n        claimMints++;\\n\\n        emit ClaimMint(msg.sender, _number, block.timestamp);\\n    }\\n\\n    function SetUserReward(\\n        address[] calldata _users,\\n        uint256[] calldata _withdrawAmounts,\\n        uint256 _totalUnwithdrawAmounts,\\n        uint8[] memory vs,\\n        bytes32[] memory rs,\\n        bytes32[] memory ss\\n    ) public isOnlyOwner {\\n        require(validSignature(msg.sender, vs, rs, ss), \\\"invalid signatures\\\");\\n        spendNonce = spendNonce + 1;\\n\\n        uint256 _len = _users.length;\\n\\n        require(_len == _withdrawAmounts.length, \\\"error length\\\");\\n\\n        for (uint256 i = 0; i < _len; i++) {\\n            withdrawAmount[_users[i]] = _withdrawAmounts[i];\\n        }\\n\\n        treasuryValue += _totalUnwithdrawAmounts;\\n\\n        _mint(FoundationAddr, (treasuryValue * 20) / 100);\\n        treasuryValue = (treasuryValue * 80) / 100;\\n    }\\n\\n    function getRewardAmount(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _userTotalAmount,\\n            uint256 _userWithdraw,\\n            uint256 _userUnWithdraw\\n        )\\n    {\\n        _userTotalAmount = userWithdraws[_user];\\n        _userWithdraw = withdrawAmount[_user];\\n        _userUnWithdraw = unWithDrawAmount[_user];\\n    }\\n\\n    function Receive() public {\\n        uint256 _amount = withdrawAmount[msg.sender];\\n\\n        require(_amount > 0, \\\"amount > 0\\\");\\n        require(\\n            !dayReceivedAmount[msg.sender][block.timestamp / SECONDS_IN_DAY],\\n            \\\"day receive\\\"\\n        );\\n\\n        dayReceivedAmount[msg.sender][block.timestamp / SECONDS_IN_DAY] = true;\\n\\n        _amount = (_amount * 10) / 100;\\n\\n        userWithdraws[msg.sender] += _amount;\\n\\n        withdrawAmount[msg.sender] = 9 * _amount;\\n\\n        _mint(msg.sender, _amount);\\n        emit UserReceive(msg.sender);\\n    }\\n\\n    function stake(uint256 amount, uint256 term) external {\\n        require(balanceOf(msg.sender) >= amount, \\\"TERA: Not enough balance\\\");\\n        require(amount > 0, \\\"TERA: amount > 0\\\");\\n        require(term >= 1, \\\"TERA: term >= 1\\\");\\n        require(userStakes[msg.sender].amount == 0, \\\"TERA: Stake exists\\\"); // \\u5df2\\u7ecf\\u8d28\\u62bc\\u8fc7\\u4e86\\n\\n        // burn staked NGP\\n        transfer(address(this), amount);\\n        // create NGP Stake\\n        _createStake(amount, term); // \\u521b\\u5efa\\u8d28\\u62bc\\u6570\\u636e\\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n\\n        dayStaked[_today] += amount;\\n\\n        emit Staked(msg.sender, amount, term);\\n    }\\n\\n    function withdraw() external {\\n        StakeInfo memory userStake = userStakes[msg.sender];\\n        require(userStake.amount > 0, \\\"TERA: no stake exists\\\");\\n        require(userStake.maturityTs <= block.timestamp, \\\"maturityTs\\\");\\n        // \\u8ba1\\u7b97\\u8d28\\u62bc\\u5956\\u52b1\\n        uint256 ngpReward = _calculateStakeReward(\\n            userStake.amount,\\n            userStake.term,\\n            userStake.maturityTs\\n        );\\n\\n        uint256 unLockValue = userStake.amount + ngpReward;\\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n\\n        stakeValues[msg.sender] += ngpReward;\\n\\n        totalEarn += ngpReward;\\n\\n        activeStakes--;\\n        totalNGPStaked -= userStake.amount;\\n\\n        dayUnStaked[_today] += unLockValue;\\n\\n        mint(msg.sender, unLockValue);\\n        emit Withdrawn(msg.sender, userStake.amount, ngpReward);\\n        delete userStakes[msg.sender];\\n    }\\n\\n    function _calculateStakeReward(\\n        uint256 amount,\\n        uint256 term,\\n        uint256 maturityTs\\n    ) private view returns (uint256) {\\n        if (block.timestamp > maturityTs) {\\n            uint256 rate = apy * term; // apy*\\u5929\\u6570*1000/365\\n            return (amount * rate) / 100; // \\u8d28\\u62bc\\u7684\\u6570\\u91cf * rate / 100_000_000\\n        }\\n        return 0;\\n    }\\n\\n    function _createStake(uint256 amount, uint256 term) private {\\n        userStakes[msg.sender] = StakeInfo({\\n            term: term, // \\u5929\\u6570\\n            maturityTs: block.timestamp + term * SECONDS_IN_DAY, // \\u5230\\u671f\\u65f6\\u95f4\\n            amount: amount // \\u6570\\u91cf\\n        });\\n\\n        activeStakes++; // \\u6d3b\\u8dc3\\u8d28\\u62bc\\u8005\\u6570\\u91cf\\n        totalNGPStaked += amount; // \\u603b\\u7684\\u8d28\\u62bc\\u6570\\u91cf\\n    }\\n\\n    function validSignature(\\n        address _sender,\\n        uint8[] memory vs,\\n        bytes32[] memory rs,\\n        bytes32[] memory ss\\n    ) public view returns (bool) {\\n        require(vs.length == rs.length, \\\"vs.length == rs.length\\\");\\n        require(rs.length == ss.length, \\\"rs.length == ss.length\\\");\\n        require(vs.length <= owners.length, \\\"vs.length <= owners.length\\\");\\n        require(vs.length >= required, \\\"vs.length >= required\\\");\\n        bytes32 message = _messageToRecover(_sender);\\n        address[] memory addrs = new address[](vs.length);\\n        for (uint i = 0; i < vs.length; i++) {\\n            //recover the address associated with the public key from elliptic curve signature or return zero on error\\n            addrs[i] = ecrecover(message, vs[i] + 27, rs[i], ss[i]);\\n        }\\n\\n        require(_distinctOwners(addrs), \\\"_distinctOwners\\\");\\n        return true;\\n    }\\n\\n    function _messageToRecover(address _sender) private view returns (bytes32) {\\n        bytes32 hashedUnsignedMessage = generateMessageToSign(_sender);\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\\n    }\\n\\n    function generateMessageToSign(\\n        address _sender\\n    ) private view returns (bytes32) {\\n        //the sequence should match generateMultiSigV2 in JS\\n        bytes32 message = keccak256(\\n            abi.encodePacked(_sender, block.chainid, spendNonce)\\n        );\\n        return message;\\n    }\\n\\n    function _distinctOwners(\\n        address[] memory addrs\\n    ) private view returns (bool) {\\n        if (addrs.length > owners.length) {\\n            return false;\\n        }\\n        for (uint i = 0; i < addrs.length; i++) {\\n            //if (!isOwner[addrs[i]]) {\\n            //    return false;\\n            //}\\n            //address should be distinct\\n            //for (uint j = 0; j < i; j++) {\\n            //    if (addrs[i] == addrs[j]) {\\n            //        return false;\\n            //    }\\n            //}\\n        }\\n        return true;\\n    }\\n\\n    function getSpendNonce() external view returns (uint256) {\\n        return spendNonce;\\n    }\\n\\n    function addSpendNonce() external {\\n        spendNonce++;\\n    }\\n\\n    function getMeshData()\\n        external\\n        view\\n        returns (\\n            uint256 userCounts,\\n            uint256 launchData,\\n            uint256 totalMinted,\\n            uint256 liquidSupply\\n        )\\n    {\\n        userCounts = activeMinters;\\n        launchData = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n        totalMinted = totalSupply();\\n        liquidSupply = totalMinted - balanceOf(address(this));\\n    }\\n\\n    function getMeshDashboard()\\n        external\\n        view\\n        returns (\\n            uint256 participants,\\n            uint256 totalclaimMints,\\n            uint256 claimedMesh,\\n            uint256 maxHeats,\\n            uint256 sinceGenesis\\n        )\\n    {\\n        participants = activeMinters;\\n        totalclaimMints = claimMints;\\n        claimedMesh = activeNumbers;\\n        maxHeats = maxMeshHeats;\\n        sinceGenesis = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n    }\\n\\n    function getEarthDashboard()\\n        external\\n        view\\n        returns (\\n            uint256 _totalSupply,\\n            uint256 liquidSupply,\\n            uint256 destruction,\\n            uint256 totalStaked,\\n            uint256 treasury,\\n            uint256 foundation\\n        )\\n    {\\n        _totalSupply = totalSupply();\\n        liquidSupply = _totalSupply - balanceOf(address(this));\\n        destruction = destructions;\\n        totalStaked = totalNGPStaked;\\n        treasury = treasuryValue;\\n        foundation = balanceOf(FoundationAddr);\\n    }\\n\\n    function getStakeInfo(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 tvl,\\n            uint256 revenue,\\n            uint256 earned,\\n            uint256 claimable,\\n            uint256 totalApy,\\n            uint256 staked,\\n            uint256 totalEarnValue,\\n            uint256 offEarthStake\\n        )\\n    {\\n        uint256 price = 0;\\n        tvl = totalNGPStaked * price;\\n        revenue = totalEarn * price;\\n        earned = totalEarn;\\n        if (userStakes[_user].maturityTs <= block.timestamp) {\\n            claimable = userStakes[_user].amount;\\n        } else {\\n            claimable = 0;\\n        }\\n\\n        totalApy = apy;\\n\\n        staked = userStakes[_user].amount;\\n\\n        totalEarnValue = stakeValues[_user];\\n        //\\u5f53\\u524d\\u8d28\\u62bc\\u9501\\u5b9aEARTH\\u6570\\u91cf / \\u5df2\\u7ecf\\u7d2f\\u8ba1\\u94f8\\u9020\\u51fa\\u6765\\u7684EARTH\\u603b\\u6570\\u91cf\\u3002\\n        uint256 totalSupply = totalSupply();\\n        if (totalSupply != 0) {\\n            offEarthStake = (totalNGPStaked * 1000000) / totalSupply;\\n        }\\n    }\\n\\n    function mint(address user, uint256 amount) private {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n\\n        dayReceived[_today] += amount;\\n        _mint(user, amount);\\n    }\\n\\n    function getNetworkEvents()\\n        external\\n        view\\n        returns (\\n            uint256 _genesisTs,\\n            uint256[] memory _received,\\n            uint256[] memory _staked,\\n            uint256[] memory _unstaked\\n        )\\n    {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n        _received = new uint256[](_today);\\n        _staked = new uint256[](_today);\\n        _unstaked = new uint256[](_today);\\n\\n        _genesisTs = genesisTs;\\n\\n        for (uint256 i = 0; i < _today; i++) {\\n            _received[i] = dayReceived[i];\\n            _staked[i] = dayStaked[i];\\n            _unstaked[i] = dayUnStaked[i];\\n        }\\n    }\\n\\n    function getStakeTime(address user) external view returns (uint256 ts) {\\n        if (userStakes[user].amount == 0) {\\n            ts = 0;\\n        }\\n\\n        ts = userStakes[user].maturityTs;\\n    }\\n\\n    function getClaimTsAmount(\\n        address _user,\\n        string calldata _number\\n    ) public view returns (int256 count, uint256 _amount) {\\n        if (userMints[_user][_number].withdrawTs != 0) {\\n            count = -1;\\n        } else {\\n            count = int256(userApplys[_number].length);\\n            _amount = degreeHeats[_number] / 10;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa748d5dd5df5fc56877c289496ca14a413c7a09680386eed501dd63b26f52652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613672806100206000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c80637b0472f0116101f4578063c18fab141161011a578063e3af6d0a116100ad578063ed2f23691161007c578063ed2f2369146109a9578063f01d110c146109b2578063f9a18ba5146109bb578063fb1c8b9f146109db57600080fd5b8063e3af6d0a14610928578063e3c41c4e14610931578063e8ca8da314610961578063ebcdbc2d1461098957600080fd5b8063cb48e3c6116100e9578063cb48e3c6146108cc578063cb92ef4a146108ec578063dd62ed3e1461090c578063dffd722f1461091f57600080fd5b8063c18fab141461082e578063c293d09b14610863578063c345315314610876578063c6a2a9f1146108c457600080fd5b80639d0c0f2311610192578063a6a5ff9211610161578063a6a5ff92146107d7578063a9059cbb146107ff578063b4800cdc14610812578063bcfd8dbf1461081b57600080fd5b80639d0c0f23146107935780639f1b3bad146107b3578063a457c2d7146107bb578063a6734715146107ce57600080fd5b80638da7ad23116101ce5780638da7ad231461073b5780638ed4064a1461076a578063903993181461077357806395d89b411461078b57600080fd5b80637b0472f0146106dd578063890d3b27146106f05780638d6b6a591461071b57600080fd5b80633adfe5ea116102d95780634c2346fa1161027757806361a52a361161024657806361a52a36146106755780636e5d82801461067e57806370a08231146106a157806372483bf9146106ca57600080fd5b80634c2346fa146106195780634f4201511461062c5780635cad385c1461064c5780635f7bb9321461065557600080fd5b80633d7af48f116102b35780633d7af48f1461057457806341b23df01461057d57806344a040f5146105ab578063474a2b191461060657600080fd5b80633adfe5ea1461055b5780633bcfc4b8146105635780633ccfd60b1461056c57600080fd5b806318160ddd1161035157806323b872dd1161032057806323b872dd146105065780632c2d0a0c14610519578063313ce56714610539578063395093511461054857600080fd5b806318160ddd1461048f5780631c02b1f4146104975780631dca03bc146104a05780631ea13164146104cb57600080fd5b80630bfbba011161038d5780630bfbba011461040c5780630ffcccff1461041f578063130662401461043f5780631442156f1461045457600080fd5b806306fdde03146103b4578063095ea7b3146103d25780630aedb5ba146103f5575b600080fd5b6103bc6109fe565b6040516103c99190612bed565b60405180910390f35b6103e56103e0366004612c1c565b610a90565b60405190151581526020016103c9565b6103fe60655481565b6040519081526020016103c9565b6103bc61041a366004612c1c565b610aaa565b6103fe61042d366004612c46565b60836020526000908152604090205481565b61045261044d366004612d14565b610b63565b005b6103fe610462366004612d50565b81516020818401810180516089825292820194820194909420919093529091526000908152604090205481565b6035546103fe565b6103fe60765481565b6103fe6104ae366004612d14565b805160208183018101805160688252928201919093012091525481565b6103fe6104d9366004612d50565b81516020818401810180516088825292820194820194909420919093529091526000908152604090205481565b6103e5610514366004612d9d565b610fc2565b6103fe610527366004612c46565b60856020526000908152604090205481565b604051601281526020016103c9565b6103e5610556366004612c1c565b610fe8565b61045261100a565b6103fe60795481565b610452611021565b6103fe60745481565b6103e561058b366004612c1c565b608a60209081526000928352604080842090915290825290205460ff1681565b6105eb6105b9366004612dd9565b6001600160a01b0316600090815260876020908152604080832054606a835281842054606b9093529220549192909190565b604080519384526020840192909252908201526060016103c9565b610452610614366004612f38565b61122a565b6103e561062736600461301d565b6113ff565b6103fe61063a366004612dd9565b606a6020526000908152604090205481565b6103fe60775481565b6103fe610663366004612dd9565b60826020526000908152604090205481565b6103fe60785481565b6103e561068c366004612c46565b607f6020526000908152604090205460ff1681565b6103fe6106af366004612dd9565b6001600160a01b031660009081526033602052604090205490565b6104526106d83660046130b5565b6116e3565b6104526106eb366004613111565b61195e565b608154610703906001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b6103fe610729366004612dd9565b60866020526000908152604090205481565b6105eb610749366004612dd9565b607d6020526000908152604090208054600182015460029092015490919083565b6103fe607b5481565b61077b611b34565b6040516103c9949392919061316e565b6103bc611ce2565b6103fe6107a1366004612dd9565b60876020526000908152604090205481565b610452611cf1565b6103e56107c9366004612c1c565b611e87565b6103fe60755481565b6107df611f0d565b6040805194855260208501939093529183015260608201526080016103c9565b6103e561080d366004612c1c565b611f63565b6103fe60735481565b6103fe610829366004612dd9565b611f71565b610836611fb4565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016103c9565b6107036108713660046131b8565b612019565b610889610884366004612dd9565b612060565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016103c9565b606e546103fe565b6103fe6108da366004612dd9565b606b6020526000908152604090205481565b6103fe6108fa366004612c46565b607e6020526000908152604090205481565b6103fe61091a3660046131fc565b61214d565b6103fe607c5481565b6103fe60725481565b610939612178565b604080519586526020860194909452928401919091526060830152608082015260a0016103c9565b61097461096f366004613226565b6121ab565b604080519283526020830191909152016103c9565b6103fe610997366004612c46565b60846020526000908152604090205481565b6103fe607a5481565b6103fe60805481565b6103fe6109c9366004612dd9565b606c6020526000908152604090205481565b6109ee6109e93660046132a8565b612254565b6040516103c994939291906132f5565b606060368054610a0d9061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a399061332c565b8015610a865780601f10610a5b57610100808354040283529160200191610a86565b820191906000526020600020905b815481529060010190602001808311610a6957829003601f168201915b5050505050905090565b600033610a9e81858561232b565b60019150505b92915050565b60696020528160005260406000208181548110610ac657600080fd5b90600052602060002001600091509150508054610ae29061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0e9061332c565b8015610b5b5780601f10610b3057610100808354040283529160200191610b5b565b820191906000526020600020905b815481529060010190602001808311610b3e57829003601f168201915b505050505081565b336000908152606660205260408082209051610b80908490613367565b9081526040805191829003602090810183206080840190925281546001600160a01b0316835260018201805491840191610bb99061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610be59061332c565b8015610c325780601f10610c0757610100808354040283529160200191610c32565b820191906000526020600020905b815481529060010190602001808311610c1557829003601f168201915b505050505081526020016002820154815260200160038201548152505090508060400151600014610caa5760405162461bcd60e51b815260206004820152601e60248201527f6d4e47503a204d696e7420616c726561647920696e2070726f6772657373000060448201526064015b60405180910390fd5b6000606783604051610cbc9190613367565b9081526040519081900360200190205490508015610d30576000600a606885604051610ce89190613367565b908152602001604051809103902054610d019190613399565b90508060776000828254610d1591906133bb565b90915550508015610d2a57610d2a3382612450565b50610d46565b60748054906000610d40836133d3565b91905055505b6020808301849052338084524260408086018290526060860191909152600091825260669092528190209051839190610d80908690613367565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781558282015180519192610dc692600185019290910190612afc565b506040820151816002015560608201518160030155905050606783604051610dee9190613367565b90815260405190819003602090810182208054600181018255600091825291812090910180546001600160a01b0319163317905590606790610e31908690613367565b9081526040519081900360200190205490506000610e508260646134d2565b610e5b83606a6134d2565b610e6790611a0b6134de565b610e769064174876e8006134de565b610e809190613399565b905080606886604051610e939190613367565b9081526020016040518091039020819055507fe5c486bee358a5fff5e4d70dc5fdaaf14806df125ffde843a8c40db608264812858284604051610ed8939291906134fd565b60405180910390a1607654811115610ef05760768190555b33600090815260696020908152604082208054600181018255908352918190208751610f23939190910191880190612afc565b50336000908152606d602052604090205460ff16610f6b5760738054906000610f4b836133d3565b9091555050336000908152606d60205260409020805460ff191660011790555b60758054906000610f7b836133d3565b91905055507f1309ab74031e37b46ee8ce9ff667a17a5c69a500a05d167e4c89ad8b0bc40bf9338642604051610fb393929190613522565b60405180910390a15050505050565b600033610fd0858285612581565b610fdb8585856125fb565b60019150505b9392505050565b600033610a9e818585610ffb838361214d565b61100591906133bb565b61232b565b606e805490600061101a836133d3565b9190505550565b336000908152607d6020908152604091829020825160608101845281548152600182015492810192909252600201549181018290529061109b5760405162461bcd60e51b8152602060048201526015602482015274544552413a206e6f207374616b652065786973747360581b6044820152606401610ca1565b42816020015111156110dc5760405162461bcd60e51b815260206004820152600a6024820152696d61747572697479547360b01b6044820152606401610ca1565b60006110f58260400151836000015184602001516127a6565b9050600081836040015161110991906133bb565b905060006078546072544261111e9190613556565b6111289190613399565b3360009081526082602052604081208054929350859290919061114c9084906133bb565b9250508190555082607c600082825461116591906133bb565b9091555050607a805490600061117a8361356d565b91905055508360400151607b60008282546111959190613556565b9091555050600081815260856020526040812080548492906111b89084906133bb565b909155506111c8905033836127ea565b60408085015181519081526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050336000908152607d6020526040812081815560018101829055600201555050565b336000908152606f602052604090205460ff166112755760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610ca1565b611281338484846113ff565b6112c25760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b6044820152606401610ca1565b606e546112d09060016133bb565b606e55868581146113125760405162461bcd60e51b815260206004820152600c60248201526b0cae4e4dee440d8cadccee8d60a31b6044820152606401610ca1565b60005b8181101561138d5787878281811061132f5761132f613584565b90506020020135606a60008c8c8581811061134c5761134c613584565b90506020020160208101906113619190612dd9565b6001600160a01b0316815260208101919091526040016000205580611385816133d3565b915050611315565b5084608060008282546113a091906133bb565b90915550506081546080546113d6916001600160a01b0316906064906113c79060146134de565b6113d19190613399565b612838565b606460805460506113e791906134de565b6113f19190613399565b608055505050505050505050565b6000825184511461144b5760405162461bcd60e51b81526020600482015260166024820152750ece65cd8cadccee8d0407a7a40e4e65cd8cadccee8d60531b6044820152606401610ca1565b81518351146114955760405162461bcd60e51b81526020600482015260166024820152750e4e65cd8cadccee8d0407a7a40e6e65cd8cadccee8d60531b6044820152606401610ca1565b607054845111156114e85760405162461bcd60e51b815260206004820152601a60248201527f76732e6c656e677468203c3d206f776e6572732e6c656e6774680000000000006044820152606401610ca1565b607154845110156115335760405162461bcd60e51b81526020600482015260156024820152741d9ccb9b195b99dd1a080f8f481c995c5d5a5c9959605a1b6044820152606401610ca1565b600061153e866128fa565b9050600085516001600160401b0381111561155b5761155b612c5f565b604051908082528060200260200182016040528015611584578160200160208202803683370190505b50905060005b865181101561168e576001838883815181106115a8576115a8613584565b6020026020010151601b6115bc919061359a565b8884815181106115ce576115ce613584565b60200260200101518885815181106115e8576115e8613584565b602002602001015160405160008152602001604052604051611626949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611648573d6000803e3d6000fd5b5050506020604051035182828151811061166457611664613584565b6001600160a01b039092166020928302919091019091015280611686816133d3565b91505061158a565b50611698816129bc565b6116d65760405162461bcd60e51b815260206004820152600f60248201526e5f64697374696e63744f776e65727360881b6044820152606401610ca1565b5060019695505050505050565b600054610100900460ff16158080156117035750600054600160ff909116105b8061171d5750303b15801561171d575060005460ff166001145b6117805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ca1565b6000805460ff1916600117905580156117a3576000805461ff0019166101001790555b6117eb6040518060400160405280600a8152602001692a22a920902a37b5b2b760b11b815250604051806040016040528060048152602001635445524160e01b8152506129f9565b60005b848110156118d057600086868381811061180a5761180a613584565b905060200201602081019061181f9190612dd9565b6001600160a01b0381166000908152606f602052604090205490915060ff168061185057506001600160a01b038116155b1561185a57600080fd5b6001600160a01b03166000818152606f60205260408120805460ff191660019081179091556070805491820181559091527f8f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b0180546001600160a01b0319169091179055806118c8816133d3565b9150506117ee565b506118dc600285613399565b6118e79060016133bb565b60715562015180607855426072556079839055608180546001600160a01b0319166001600160a01b0384161790558015611957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610fb3565b5050505050565b336000908152603360205260409020548211156119bd5760405162461bcd60e51b815260206004820152601860248201527f544552413a204e6f7420656e6f7567682062616c616e636500000000000000006044820152606401610ca1565b60008211611a005760405162461bcd60e51b815260206004820152601060248201526f0544552413a20616d6f756e74203e20360841b6044820152606401610ca1565b6001811015611a435760405162461bcd60e51b815260206004820152600f60248201526e544552413a207465726d203e3d203160881b6044820152606401610ca1565b336000908152607d602052604090206002015415611a985760405162461bcd60e51b8152602060048201526012602482015271544552413a205374616b652065786973747360701b6044820152606401610ca1565b611aa23083611f63565b50611aad8282612a2a565b600060785460725442611ac09190613556565b611aca9190613399565b905082608460008381526020019081526020016000206000828254611aef91906133bb565b9091555050604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2505050565b60006060806060600060785460725442611b4e9190613556565b611b589190613399565b9050806001600160401b03811115611b7257611b72612c5f565b604051908082528060200260200182016040528015611b9b578160200160208202803683370190505b509350806001600160401b03811115611bb657611bb6612c5f565b604051908082528060200260200182016040528015611bdf578160200160208202803683370190505b509250806001600160401b03811115611bfa57611bfa612c5f565b604051908082528060200260200182016040528015611c23578160200160208202803683370190505b509150607254945060005b81811015611cda576000818152608360205260409020548551869083908110611c5957611c59613584565b6020026020010181815250506084600082815260200190815260200160002054848281518110611c8b57611c8b613584565b6020026020010181815250506085600082815260200190815260200160002054838281518110611cbd57611cbd613584565b602090810291909101015280611cd2816133d3565b915050611c2e565b505090919293565b606060378054610a0d9061332c565b336000908152606a602052604090205480611d3b5760405162461bcd60e51b815260206004820152600a6024820152690616d6f756e74203e20360b41b6044820152606401610ca1565b336000908152608a60205260408120607854909190611d5a9042613399565b815260208101919091526040016000205460ff1615611da95760405162461bcd60e51b815260206004820152600b60248201526a646179207265636569766560a81b6044820152606401610ca1565b336000908152608a6020526040812060785460019290611dc99042613399565b81526020810191909152604001600020805460ff19169115159190911790556064611df582600a6134de565b611dff9190613399565b33600090815260876020526040812080549293508392909190611e239084906133bb565b90915550611e3490508160096134de565b336000818152606a6020526040902091909155611e519082612838565b6040513381527ff78ef385f7cb8b9410efbec2e37ec346c24531feea7a4be70f153a40e2d49ee99060200160405180910390a150565b60003381611e95828661214d565b905083811015611ef55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ca1565b611f02828686840361232b565b506001949350505050565b600080600080607354935060785460725442611f299190613556565b611f339190613399565b9250611f3e60355490565b30600090815260336020526040902054909250611f5b9083613556565b905090919293565b600033610a9e8185856125fb565b6001600160a01b0381166000908152607d6020526040812060020154611f95575060005b506001600160a01b03166000908152607d602052604090206001015490565b600080600080600080611fc660355490565b30600090815260336020526040902054909650611fe39087613556565b607754607b546080546081546001600160a01b0316600090815260336020526040902054999a9399929850909650945092509050565b8151602081840181018051606782529282019185019190912091905280548290811061204457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080600080600080600080600080607b5461207c91906134de565b985080607c5461208c91906134de565b607c546001600160a01b038c166000908152607d6020526040902060010154919950975042106120d9576001600160a01b038a166000908152607d602052604090206002015495506120de565b600095505b6079546001600160a01b038b166000908152607d60209081526040808320600201546082909252822054929750955090935061211960355490565b905080156121405780607b54620f424061213391906134de565b61213d9190613399565b92505b5050919395975091939597565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b607354607554607454607654607854607254600091906121989042613556565b6121a29190613399565b90509091929394565b6001600160a01b03831660009081526066602052604080822090518291906121d690869086906135bf565b9081526020016040518091039020600301546000146121f957600019915061224c565b6067848460405161220b9291906135bf565b908152604051908190036020018120549250600a9060689061223090879087906135bf565b9081526020016040518091039020546122499190613399565b90505b935093915050565b60666020908152600092835260409092208151808301840180519281529084019290930191909120915280546001820180546001600160a01b03909216929161229c9061332c565b80601f01602080910402602001604051908101604052809291908181526020018280546122c89061332c565b80156123155780601f106122ea57610100808354040283529160200191612315565b820191906000526020600020905b8154815290600101906020018083116122f857829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b03831661238d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ca1565b6001600160a01b0382166123ee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ca1565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166124b05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ca1565b6001600160a01b038216600090815260336020526040902054818110156125245760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ca1565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612443565b505050565b600061258d848461214d565b905060001981146125f557818110156125e85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ca1565b6125f5848484840361232b565b50505050565b6001600160a01b03831661265f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ca1565b6001600160a01b0382166126c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ca1565b6001600160a01b038316600090815260336020526040902054818110156127395760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ca1565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127999086815260200190565b60405180910390a36125f5565b6000814211156127e0576000836079546127c091906134de565b905060646127ce82876134de565b6127d89190613399565b915050610fe1565b5060009392505050565b6000607854607254426127fd9190613556565b6128079190613399565b90508160836000838152602001908152602001600020600082825461282c91906133bb565b9091555061257c905083835b6001600160a01b03821661288e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ca1565b80603560008282546128a091906133bb565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b60008061294e83606e546040805160609390931b6bffffffffffffffffffffffff19166020808501919091524660348501526054808501939093528151808503909301835260749093019052805191012090565b905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050808260405160200161299d9291906135cf565b6040516020818303038152906040528051906020012092505050919050565b607054815160009110156129d257506000919050565b60005b82518110156129f057806129e8816133d3565b9150506129d5565b50600192915050565b600054610100900460ff16612a205760405162461bcd60e51b8152600401610ca1906135f1565b6128f68282612ab2565b604051806060016040528082815260200160785483612a4991906134de565b612a5390426133bb565b81526020908101849052336000908152607d82526040808220845181559284015160018401559290920151600290910155607a805491612a92836133d3565b919050555081607b6000828254612aa991906133bb565b90915550505050565b600054610100900460ff16612ad95760405162461bcd60e51b8152600401610ca1906135f1565b8151612aec906036906020850190612afc565b50805161257c9060379060208401905b828054612b089061332c565b90600052602060002090601f016020900481019282612b2a5760008555612b70565b82601f10612b4357805160ff1916838001178555612b70565b82800160010185558215612b70579182015b82811115612b70578251825591602001919060010190612b55565b50612b7c929150612b80565b5090565b5b80821115612b7c5760008155600101612b81565b60005b83811015612bb0578181015183820152602001612b98565b838111156125f55750506000910152565b60008151808452612bd9816020860160208601612b95565b601f01601f19169290920160200192915050565b602081526000610fe16020830184612bc1565b80356001600160a01b0381168114612c1757600080fd5b919050565b60008060408385031215612c2f57600080fd5b612c3883612c00565b946020939093013593505050565b600060208284031215612c5857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c9d57612c9d612c5f565b604052919050565b600082601f830112612cb657600080fd5b81356001600160401b03811115612ccf57612ccf612c5f565b612ce2601f8201601f1916602001612c75565b818152846020838601011115612cf757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612d2657600080fd5b81356001600160401b03811115612d3c57600080fd5b612d4884828501612ca5565b949350505050565b60008060408385031215612d6357600080fd5b82356001600160401b03811115612d7957600080fd5b612d8585828601612ca5565b925050612d9460208401612c00565b90509250929050565b600080600060608486031215612db257600080fd5b612dbb84612c00565b9250612dc960208501612c00565b9150604084013590509250925092565b600060208284031215612deb57600080fd5b610fe182612c00565b60008083601f840112612e0657600080fd5b5081356001600160401b03811115612e1d57600080fd5b6020830191508360208260051b8501011115612e3857600080fd5b9250929050565b60006001600160401b03821115612e5857612e58612c5f565b5060051b60200190565b600082601f830112612e7357600080fd5b81356020612e88612e8383612e3f565b612c75565b82815260059290921b84018101918181019086841115612ea757600080fd5b8286015b84811015612ed257803560ff81168114612ec55760008081fd5b8352918301918301612eab565b509695505050505050565b600082601f830112612eee57600080fd5b81356020612efe612e8383612e3f565b82815260059290921b84018101918181019086841115612f1d57600080fd5b8286015b84811015612ed25780358352918301918301612f21565b60008060008060008060008060c0898b031215612f5457600080fd5b88356001600160401b0380821115612f6b57600080fd5b612f778c838d01612df4565b909a50985060208b0135915080821115612f9057600080fd5b612f9c8c838d01612df4565b909850965060408b0135955060608b0135915080821115612fbc57600080fd5b612fc88c838d01612e62565b945060808b0135915080821115612fde57600080fd5b612fea8c838d01612edd565b935060a08b013591508082111561300057600080fd5b5061300d8b828c01612edd565b9150509295985092959890939650565b6000806000806080858703121561303357600080fd5b61303c85612c00565b935060208501356001600160401b038082111561305857600080fd5b61306488838901612e62565b9450604087013591508082111561307a57600080fd5b61308688838901612edd565b9350606087013591508082111561309c57600080fd5b506130a987828801612edd565b91505092959194509250565b600080600080606085870312156130cb57600080fd5b84356001600160401b038111156130e157600080fd5b6130ed87828801612df4565b9095509350506020850135915061310660408601612c00565b905092959194509250565b6000806040838503121561312457600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561316357815187529582019590820190600101613147565b509495945050505050565b8481526080602082015260006131876080830186613133565b82810360408401526131998186613133565b905082810360608401526131ad8185613133565b979650505050505050565b600080604083850312156131cb57600080fd5b82356001600160401b038111156131e157600080fd5b6131ed85828601612ca5565b95602094909401359450505050565b6000806040838503121561320f57600080fd5b61321883612c00565b9150612d9460208401612c00565b60008060006040848603121561323b57600080fd5b61324484612c00565b925060208401356001600160401b038082111561326057600080fd5b818601915086601f83011261327457600080fd5b81358181111561328357600080fd5b87602082850101111561329557600080fd5b6020830194508093505050509250925092565b600080604083850312156132bb57600080fd5b6132c483612c00565b915060208301356001600160401b038111156132df57600080fd5b6132eb85828601612ca5565b9150509250929050565b6001600160a01b038516815260806020820181905260009061331990830186612bc1565b6040830194909452506060015292915050565b600181811c9082168061334057607f821691505b6020821081141561336157634e487b7160e01b600052602260045260246000fd5b50919050565b60008251613379818460208701612b95565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000826133b657634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156133ce576133ce613383565b500190565b60006000198214156133e7576133e7613383565b5060010190565b600181815b8085111561342957816000190482111561340f5761340f613383565b8085161561341c57918102915b93841c93908002906133f3565b509250929050565b60008261344057506001610aa4565b8161344d57506000610aa4565b8160018114613463576002811461346d57613489565b6001915050610aa4565b60ff84111561347e5761347e613383565b50506001821b610aa4565b5060208310610133831016604e8410600b84101617156134ac575081810a610aa4565b6134b683836133ee565b80600019048211156134ca576134ca613383565b029392505050565b6000610fe18383613431565b60008160001904831182151516156134f8576134f8613383565b500290565b6060815260006135106060830186612bc1565b60208301949094525060400152919050565b6001600160a01b038416815260606020820181905260009061354690830185612bc1565b9050826040830152949350505050565b60008282101561356857613568613383565b500390565b60008161357c5761357c613383565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff038211156135b7576135b7613383565b019392505050565b8183823760009101908152919050565b600083516135e1818460208801612b95565b9190910191825250602001919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212200709844f84656162c86416fe640864cfa84ae843b7b53d31b23b4cc214f0632564736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103af5760003560e01c80637b0472f0116101f4578063c18fab141161011a578063e3af6d0a116100ad578063ed2f23691161007c578063ed2f2369146109a9578063f01d110c146109b2578063f9a18ba5146109bb578063fb1c8b9f146109db57600080fd5b8063e3af6d0a14610928578063e3c41c4e14610931578063e8ca8da314610961578063ebcdbc2d1461098957600080fd5b8063cb48e3c6116100e9578063cb48e3c6146108cc578063cb92ef4a146108ec578063dd62ed3e1461090c578063dffd722f1461091f57600080fd5b8063c18fab141461082e578063c293d09b14610863578063c345315314610876578063c6a2a9f1146108c457600080fd5b80639d0c0f2311610192578063a6a5ff9211610161578063a6a5ff92146107d7578063a9059cbb146107ff578063b4800cdc14610812578063bcfd8dbf1461081b57600080fd5b80639d0c0f23146107935780639f1b3bad146107b3578063a457c2d7146107bb578063a6734715146107ce57600080fd5b80638da7ad23116101ce5780638da7ad231461073b5780638ed4064a1461076a578063903993181461077357806395d89b411461078b57600080fd5b80637b0472f0146106dd578063890d3b27146106f05780638d6b6a591461071b57600080fd5b80633adfe5ea116102d95780634c2346fa1161027757806361a52a361161024657806361a52a36146106755780636e5d82801461067e57806370a08231146106a157806372483bf9146106ca57600080fd5b80634c2346fa146106195780634f4201511461062c5780635cad385c1461064c5780635f7bb9321461065557600080fd5b80633d7af48f116102b35780633d7af48f1461057457806341b23df01461057d57806344a040f5146105ab578063474a2b191461060657600080fd5b80633adfe5ea1461055b5780633bcfc4b8146105635780633ccfd60b1461056c57600080fd5b806318160ddd1161035157806323b872dd1161032057806323b872dd146105065780632c2d0a0c14610519578063313ce56714610539578063395093511461054857600080fd5b806318160ddd1461048f5780631c02b1f4146104975780631dca03bc146104a05780631ea13164146104cb57600080fd5b80630bfbba011161038d5780630bfbba011461040c5780630ffcccff1461041f578063130662401461043f5780631442156f1461045457600080fd5b806306fdde03146103b4578063095ea7b3146103d25780630aedb5ba146103f5575b600080fd5b6103bc6109fe565b6040516103c99190612bed565b60405180910390f35b6103e56103e0366004612c1c565b610a90565b60405190151581526020016103c9565b6103fe60655481565b6040519081526020016103c9565b6103bc61041a366004612c1c565b610aaa565b6103fe61042d366004612c46565b60836020526000908152604090205481565b61045261044d366004612d14565b610b63565b005b6103fe610462366004612d50565b81516020818401810180516089825292820194820194909420919093529091526000908152604090205481565b6035546103fe565b6103fe60765481565b6103fe6104ae366004612d14565b805160208183018101805160688252928201919093012091525481565b6103fe6104d9366004612d50565b81516020818401810180516088825292820194820194909420919093529091526000908152604090205481565b6103e5610514366004612d9d565b610fc2565b6103fe610527366004612c46565b60856020526000908152604090205481565b604051601281526020016103c9565b6103e5610556366004612c1c565b610fe8565b61045261100a565b6103fe60795481565b610452611021565b6103fe60745481565b6103e561058b366004612c1c565b608a60209081526000928352604080842090915290825290205460ff1681565b6105eb6105b9366004612dd9565b6001600160a01b0316600090815260876020908152604080832054606a835281842054606b9093529220549192909190565b604080519384526020840192909252908201526060016103c9565b610452610614366004612f38565b61122a565b6103e561062736600461301d565b6113ff565b6103fe61063a366004612dd9565b606a6020526000908152604090205481565b6103fe60775481565b6103fe610663366004612dd9565b60826020526000908152604090205481565b6103fe60785481565b6103e561068c366004612c46565b607f6020526000908152604090205460ff1681565b6103fe6106af366004612dd9565b6001600160a01b031660009081526033602052604090205490565b6104526106d83660046130b5565b6116e3565b6104526106eb366004613111565b61195e565b608154610703906001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b6103fe610729366004612dd9565b60866020526000908152604090205481565b6105eb610749366004612dd9565b607d6020526000908152604090208054600182015460029092015490919083565b6103fe607b5481565b61077b611b34565b6040516103c9949392919061316e565b6103bc611ce2565b6103fe6107a1366004612dd9565b60876020526000908152604090205481565b610452611cf1565b6103e56107c9366004612c1c565b611e87565b6103fe60755481565b6107df611f0d565b6040805194855260208501939093529183015260608201526080016103c9565b6103e561080d366004612c1c565b611f63565b6103fe60735481565b6103fe610829366004612dd9565b611f71565b610836611fb4565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016103c9565b6107036108713660046131b8565b612019565b610889610884366004612dd9565b612060565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016103c9565b606e546103fe565b6103fe6108da366004612dd9565b606b6020526000908152604090205481565b6103fe6108fa366004612c46565b607e6020526000908152604090205481565b6103fe61091a3660046131fc565b61214d565b6103fe607c5481565b6103fe60725481565b610939612178565b604080519586526020860194909452928401919091526060830152608082015260a0016103c9565b61097461096f366004613226565b6121ab565b604080519283526020830191909152016103c9565b6103fe610997366004612c46565b60846020526000908152604090205481565b6103fe607a5481565b6103fe60805481565b6103fe6109c9366004612dd9565b606c6020526000908152604090205481565b6109ee6109e93660046132a8565b612254565b6040516103c994939291906132f5565b606060368054610a0d9061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a399061332c565b8015610a865780601f10610a5b57610100808354040283529160200191610a86565b820191906000526020600020905b815481529060010190602001808311610a6957829003601f168201915b5050505050905090565b600033610a9e81858561232b565b60019150505b92915050565b60696020528160005260406000208181548110610ac657600080fd5b90600052602060002001600091509150508054610ae29061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0e9061332c565b8015610b5b5780601f10610b3057610100808354040283529160200191610b5b565b820191906000526020600020905b815481529060010190602001808311610b3e57829003601f168201915b505050505081565b336000908152606660205260408082209051610b80908490613367565b9081526040805191829003602090810183206080840190925281546001600160a01b0316835260018201805491840191610bb99061332c565b80601f0160208091040260200160405190810160405280929190818152602001828054610be59061332c565b8015610c325780601f10610c0757610100808354040283529160200191610c32565b820191906000526020600020905b815481529060010190602001808311610c1557829003601f168201915b505050505081526020016002820154815260200160038201548152505090508060400151600014610caa5760405162461bcd60e51b815260206004820152601e60248201527f6d4e47503a204d696e7420616c726561647920696e2070726f6772657373000060448201526064015b60405180910390fd5b6000606783604051610cbc9190613367565b9081526040519081900360200190205490508015610d30576000600a606885604051610ce89190613367565b908152602001604051809103902054610d019190613399565b90508060776000828254610d1591906133bb565b90915550508015610d2a57610d2a3382612450565b50610d46565b60748054906000610d40836133d3565b91905055505b6020808301849052338084524260408086018290526060860191909152600091825260669092528190209051839190610d80908690613367565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781558282015180519192610dc692600185019290910190612afc565b506040820151816002015560608201518160030155905050606783604051610dee9190613367565b90815260405190819003602090810182208054600181018255600091825291812090910180546001600160a01b0319163317905590606790610e31908690613367565b9081526040519081900360200190205490506000610e508260646134d2565b610e5b83606a6134d2565b610e6790611a0b6134de565b610e769064174876e8006134de565b610e809190613399565b905080606886604051610e939190613367565b9081526020016040518091039020819055507fe5c486bee358a5fff5e4d70dc5fdaaf14806df125ffde843a8c40db608264812858284604051610ed8939291906134fd565b60405180910390a1607654811115610ef05760768190555b33600090815260696020908152604082208054600181018255908352918190208751610f23939190910191880190612afc565b50336000908152606d602052604090205460ff16610f6b5760738054906000610f4b836133d3565b9091555050336000908152606d60205260409020805460ff191660011790555b60758054906000610f7b836133d3565b91905055507f1309ab74031e37b46ee8ce9ff667a17a5c69a500a05d167e4c89ad8b0bc40bf9338642604051610fb393929190613522565b60405180910390a15050505050565b600033610fd0858285612581565b610fdb8585856125fb565b60019150505b9392505050565b600033610a9e818585610ffb838361214d565b61100591906133bb565b61232b565b606e805490600061101a836133d3565b9190505550565b336000908152607d6020908152604091829020825160608101845281548152600182015492810192909252600201549181018290529061109b5760405162461bcd60e51b8152602060048201526015602482015274544552413a206e6f207374616b652065786973747360581b6044820152606401610ca1565b42816020015111156110dc5760405162461bcd60e51b815260206004820152600a6024820152696d61747572697479547360b01b6044820152606401610ca1565b60006110f58260400151836000015184602001516127a6565b9050600081836040015161110991906133bb565b905060006078546072544261111e9190613556565b6111289190613399565b3360009081526082602052604081208054929350859290919061114c9084906133bb565b9250508190555082607c600082825461116591906133bb565b9091555050607a805490600061117a8361356d565b91905055508360400151607b60008282546111959190613556565b9091555050600081815260856020526040812080548492906111b89084906133bb565b909155506111c8905033836127ea565b60408085015181519081526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050336000908152607d6020526040812081815560018101829055600201555050565b336000908152606f602052604090205460ff166112755760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610ca1565b611281338484846113ff565b6112c25760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b6044820152606401610ca1565b606e546112d09060016133bb565b606e55868581146113125760405162461bcd60e51b815260206004820152600c60248201526b0cae4e4dee440d8cadccee8d60a31b6044820152606401610ca1565b60005b8181101561138d5787878281811061132f5761132f613584565b90506020020135606a60008c8c8581811061134c5761134c613584565b90506020020160208101906113619190612dd9565b6001600160a01b0316815260208101919091526040016000205580611385816133d3565b915050611315565b5084608060008282546113a091906133bb565b90915550506081546080546113d6916001600160a01b0316906064906113c79060146134de565b6113d19190613399565b612838565b606460805460506113e791906134de565b6113f19190613399565b608055505050505050505050565b6000825184511461144b5760405162461bcd60e51b81526020600482015260166024820152750ece65cd8cadccee8d0407a7a40e4e65cd8cadccee8d60531b6044820152606401610ca1565b81518351146114955760405162461bcd60e51b81526020600482015260166024820152750e4e65cd8cadccee8d0407a7a40e6e65cd8cadccee8d60531b6044820152606401610ca1565b607054845111156114e85760405162461bcd60e51b815260206004820152601a60248201527f76732e6c656e677468203c3d206f776e6572732e6c656e6774680000000000006044820152606401610ca1565b607154845110156115335760405162461bcd60e51b81526020600482015260156024820152741d9ccb9b195b99dd1a080f8f481c995c5d5a5c9959605a1b6044820152606401610ca1565b600061153e866128fa565b9050600085516001600160401b0381111561155b5761155b612c5f565b604051908082528060200260200182016040528015611584578160200160208202803683370190505b50905060005b865181101561168e576001838883815181106115a8576115a8613584565b6020026020010151601b6115bc919061359a565b8884815181106115ce576115ce613584565b60200260200101518885815181106115e8576115e8613584565b602002602001015160405160008152602001604052604051611626949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611648573d6000803e3d6000fd5b5050506020604051035182828151811061166457611664613584565b6001600160a01b039092166020928302919091019091015280611686816133d3565b91505061158a565b50611698816129bc565b6116d65760405162461bcd60e51b815260206004820152600f60248201526e5f64697374696e63744f776e65727360881b6044820152606401610ca1565b5060019695505050505050565b600054610100900460ff16158080156117035750600054600160ff909116105b8061171d5750303b15801561171d575060005460ff166001145b6117805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ca1565b6000805460ff1916600117905580156117a3576000805461ff0019166101001790555b6117eb6040518060400160405280600a8152602001692a22a920902a37b5b2b760b11b815250604051806040016040528060048152602001635445524160e01b8152506129f9565b60005b848110156118d057600086868381811061180a5761180a613584565b905060200201602081019061181f9190612dd9565b6001600160a01b0381166000908152606f602052604090205490915060ff168061185057506001600160a01b038116155b1561185a57600080fd5b6001600160a01b03166000818152606f60205260408120805460ff191660019081179091556070805491820181559091527f8f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b0180546001600160a01b0319169091179055806118c8816133d3565b9150506117ee565b506118dc600285613399565b6118e79060016133bb565b60715562015180607855426072556079839055608180546001600160a01b0319166001600160a01b0384161790558015611957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610fb3565b5050505050565b336000908152603360205260409020548211156119bd5760405162461bcd60e51b815260206004820152601860248201527f544552413a204e6f7420656e6f7567682062616c616e636500000000000000006044820152606401610ca1565b60008211611a005760405162461bcd60e51b815260206004820152601060248201526f0544552413a20616d6f756e74203e20360841b6044820152606401610ca1565b6001811015611a435760405162461bcd60e51b815260206004820152600f60248201526e544552413a207465726d203e3d203160881b6044820152606401610ca1565b336000908152607d602052604090206002015415611a985760405162461bcd60e51b8152602060048201526012602482015271544552413a205374616b652065786973747360701b6044820152606401610ca1565b611aa23083611f63565b50611aad8282612a2a565b600060785460725442611ac09190613556565b611aca9190613399565b905082608460008381526020019081526020016000206000828254611aef91906133bb565b9091555050604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2505050565b60006060806060600060785460725442611b4e9190613556565b611b589190613399565b9050806001600160401b03811115611b7257611b72612c5f565b604051908082528060200260200182016040528015611b9b578160200160208202803683370190505b509350806001600160401b03811115611bb657611bb6612c5f565b604051908082528060200260200182016040528015611bdf578160200160208202803683370190505b509250806001600160401b03811115611bfa57611bfa612c5f565b604051908082528060200260200182016040528015611c23578160200160208202803683370190505b509150607254945060005b81811015611cda576000818152608360205260409020548551869083908110611c5957611c59613584565b6020026020010181815250506084600082815260200190815260200160002054848281518110611c8b57611c8b613584565b6020026020010181815250506085600082815260200190815260200160002054838281518110611cbd57611cbd613584565b602090810291909101015280611cd2816133d3565b915050611c2e565b505090919293565b606060378054610a0d9061332c565b336000908152606a602052604090205480611d3b5760405162461bcd60e51b815260206004820152600a6024820152690616d6f756e74203e20360b41b6044820152606401610ca1565b336000908152608a60205260408120607854909190611d5a9042613399565b815260208101919091526040016000205460ff1615611da95760405162461bcd60e51b815260206004820152600b60248201526a646179207265636569766560a81b6044820152606401610ca1565b336000908152608a6020526040812060785460019290611dc99042613399565b81526020810191909152604001600020805460ff19169115159190911790556064611df582600a6134de565b611dff9190613399565b33600090815260876020526040812080549293508392909190611e239084906133bb565b90915550611e3490508160096134de565b336000818152606a6020526040902091909155611e519082612838565b6040513381527ff78ef385f7cb8b9410efbec2e37ec346c24531feea7a4be70f153a40e2d49ee99060200160405180910390a150565b60003381611e95828661214d565b905083811015611ef55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ca1565b611f02828686840361232b565b506001949350505050565b600080600080607354935060785460725442611f299190613556565b611f339190613399565b9250611f3e60355490565b30600090815260336020526040902054909250611f5b9083613556565b905090919293565b600033610a9e8185856125fb565b6001600160a01b0381166000908152607d6020526040812060020154611f95575060005b506001600160a01b03166000908152607d602052604090206001015490565b600080600080600080611fc660355490565b30600090815260336020526040902054909650611fe39087613556565b607754607b546080546081546001600160a01b0316600090815260336020526040902054999a9399929850909650945092509050565b8151602081840181018051606782529282019185019190912091905280548290811061204457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080600080600080600080600080607b5461207c91906134de565b985080607c5461208c91906134de565b607c546001600160a01b038c166000908152607d6020526040902060010154919950975042106120d9576001600160a01b038a166000908152607d602052604090206002015495506120de565b600095505b6079546001600160a01b038b166000908152607d60209081526040808320600201546082909252822054929750955090935061211960355490565b905080156121405780607b54620f424061213391906134de565b61213d9190613399565b92505b5050919395975091939597565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b607354607554607454607654607854607254600091906121989042613556565b6121a29190613399565b90509091929394565b6001600160a01b03831660009081526066602052604080822090518291906121d690869086906135bf565b9081526020016040518091039020600301546000146121f957600019915061224c565b6067848460405161220b9291906135bf565b908152604051908190036020018120549250600a9060689061223090879087906135bf565b9081526020016040518091039020546122499190613399565b90505b935093915050565b60666020908152600092835260409092208151808301840180519281529084019290930191909120915280546001820180546001600160a01b03909216929161229c9061332c565b80601f01602080910402602001604051908101604052809291908181526020018280546122c89061332c565b80156123155780601f106122ea57610100808354040283529160200191612315565b820191906000526020600020905b8154815290600101906020018083116122f857829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b03831661238d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ca1565b6001600160a01b0382166123ee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ca1565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166124b05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ca1565b6001600160a01b038216600090815260336020526040902054818110156125245760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ca1565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612443565b505050565b600061258d848461214d565b905060001981146125f557818110156125e85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ca1565b6125f5848484840361232b565b50505050565b6001600160a01b03831661265f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ca1565b6001600160a01b0382166126c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ca1565b6001600160a01b038316600090815260336020526040902054818110156127395760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ca1565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127999086815260200190565b60405180910390a36125f5565b6000814211156127e0576000836079546127c091906134de565b905060646127ce82876134de565b6127d89190613399565b915050610fe1565b5060009392505050565b6000607854607254426127fd9190613556565b6128079190613399565b90508160836000838152602001908152602001600020600082825461282c91906133bb565b9091555061257c905083835b6001600160a01b03821661288e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ca1565b80603560008282546128a091906133bb565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b60008061294e83606e546040805160609390931b6bffffffffffffffffffffffff19166020808501919091524660348501526054808501939093528151808503909301835260749093019052805191012090565b905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050808260405160200161299d9291906135cf565b6040516020818303038152906040528051906020012092505050919050565b607054815160009110156129d257506000919050565b60005b82518110156129f057806129e8816133d3565b9150506129d5565b50600192915050565b600054610100900460ff16612a205760405162461bcd60e51b8152600401610ca1906135f1565b6128f68282612ab2565b604051806060016040528082815260200160785483612a4991906134de565b612a5390426133bb565b81526020908101849052336000908152607d82526040808220845181559284015160018401559290920151600290910155607a805491612a92836133d3565b919050555081607b6000828254612aa991906133bb565b90915550505050565b600054610100900460ff16612ad95760405162461bcd60e51b8152600401610ca1906135f1565b8151612aec906036906020850190612afc565b50805161257c9060379060208401905b828054612b089061332c565b90600052602060002090601f016020900481019282612b2a5760008555612b70565b82601f10612b4357805160ff1916838001178555612b70565b82800160010185558215612b70579182015b82811115612b70578251825591602001919060010190612b55565b50612b7c929150612b80565b5090565b5b80821115612b7c5760008155600101612b81565b60005b83811015612bb0578181015183820152602001612b98565b838111156125f55750506000910152565b60008151808452612bd9816020860160208601612b95565b601f01601f19169290920160200192915050565b602081526000610fe16020830184612bc1565b80356001600160a01b0381168114612c1757600080fd5b919050565b60008060408385031215612c2f57600080fd5b612c3883612c00565b946020939093013593505050565b600060208284031215612c5857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c9d57612c9d612c5f565b604052919050565b600082601f830112612cb657600080fd5b81356001600160401b03811115612ccf57612ccf612c5f565b612ce2601f8201601f1916602001612c75565b818152846020838601011115612cf757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612d2657600080fd5b81356001600160401b03811115612d3c57600080fd5b612d4884828501612ca5565b949350505050565b60008060408385031215612d6357600080fd5b82356001600160401b03811115612d7957600080fd5b612d8585828601612ca5565b925050612d9460208401612c00565b90509250929050565b600080600060608486031215612db257600080fd5b612dbb84612c00565b9250612dc960208501612c00565b9150604084013590509250925092565b600060208284031215612deb57600080fd5b610fe182612c00565b60008083601f840112612e0657600080fd5b5081356001600160401b03811115612e1d57600080fd5b6020830191508360208260051b8501011115612e3857600080fd5b9250929050565b60006001600160401b03821115612e5857612e58612c5f565b5060051b60200190565b600082601f830112612e7357600080fd5b81356020612e88612e8383612e3f565b612c75565b82815260059290921b84018101918181019086841115612ea757600080fd5b8286015b84811015612ed257803560ff81168114612ec55760008081fd5b8352918301918301612eab565b509695505050505050565b600082601f830112612eee57600080fd5b81356020612efe612e8383612e3f565b82815260059290921b84018101918181019086841115612f1d57600080fd5b8286015b84811015612ed25780358352918301918301612f21565b60008060008060008060008060c0898b031215612f5457600080fd5b88356001600160401b0380821115612f6b57600080fd5b612f778c838d01612df4565b909a50985060208b0135915080821115612f9057600080fd5b612f9c8c838d01612df4565b909850965060408b0135955060608b0135915080821115612fbc57600080fd5b612fc88c838d01612e62565b945060808b0135915080821115612fde57600080fd5b612fea8c838d01612edd565b935060a08b013591508082111561300057600080fd5b5061300d8b828c01612edd565b9150509295985092959890939650565b6000806000806080858703121561303357600080fd5b61303c85612c00565b935060208501356001600160401b038082111561305857600080fd5b61306488838901612e62565b9450604087013591508082111561307a57600080fd5b61308688838901612edd565b9350606087013591508082111561309c57600080fd5b506130a987828801612edd565b91505092959194509250565b600080600080606085870312156130cb57600080fd5b84356001600160401b038111156130e157600080fd5b6130ed87828801612df4565b9095509350506020850135915061310660408601612c00565b905092959194509250565b6000806040838503121561312457600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561316357815187529582019590820190600101613147565b509495945050505050565b8481526080602082015260006131876080830186613133565b82810360408401526131998186613133565b905082810360608401526131ad8185613133565b979650505050505050565b600080604083850312156131cb57600080fd5b82356001600160401b038111156131e157600080fd5b6131ed85828601612ca5565b95602094909401359450505050565b6000806040838503121561320f57600080fd5b61321883612c00565b9150612d9460208401612c00565b60008060006040848603121561323b57600080fd5b61324484612c00565b925060208401356001600160401b038082111561326057600080fd5b818601915086601f83011261327457600080fd5b81358181111561328357600080fd5b87602082850101111561329557600080fd5b6020830194508093505050509250925092565b600080604083850312156132bb57600080fd5b6132c483612c00565b915060208301356001600160401b038111156132df57600080fd5b6132eb85828601612ca5565b9150509250929050565b6001600160a01b038516815260806020820181905260009061331990830186612bc1565b6040830194909452506060015292915050565b600181811c9082168061334057607f821691505b6020821081141561336157634e487b7160e01b600052602260045260246000fd5b50919050565b60008251613379818460208701612b95565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000826133b657634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156133ce576133ce613383565b500190565b60006000198214156133e7576133e7613383565b5060010190565b600181815b8085111561342957816000190482111561340f5761340f613383565b8085161561341c57918102915b93841c93908002906133f3565b509250929050565b60008261344057506001610aa4565b8161344d57506000610aa4565b8160018114613463576002811461346d57613489565b6001915050610aa4565b60ff84111561347e5761347e613383565b50506001821b610aa4565b5060208310610133831016604e8410600b84101617156134ac575081810a610aa4565b6134b683836133ee565b80600019048211156134ca576134ca613383565b029392505050565b6000610fe18383613431565b60008160001904831182151516156134f8576134f8613383565b500290565b6060815260006135106060830186612bc1565b60208301949094525060400152919050565b6001600160a01b038416815260606020820181905260009061354690830185612bc1565b9050826040830152949350505050565b60008282101561356857613568613383565b500390565b60008161357c5761357c613383565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff038211156135b7576135b7613383565b019392505050565b8183823760009101908152919050565b600083516135e1818460208801612b95565b9190910191825250602001919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212200709844f84656162c86416fe640864cfa84ae843b7b53d31b23b4cc214f0632564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1254,
        "contract": "contracts/NGP.sol:NGP",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 187,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 193,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 195,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 197,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 199,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/NGP.sol:NGP",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1272,
        "contract": "contracts/NGP.sol:NGP",
        "label": "daySupply",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1279,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userMints",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(MintInfo)1270_storage))"
      },
      {
        "astId": 1284,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userApplys",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1288,
        "contract": "contracts/NGP.sol:NGP",
        "label": "degreeHeats",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1293,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userNumbers",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 1297,
        "contract": "contracts/NGP.sol:NGP",
        "label": "withdrawAmount",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1301,
        "contract": "contracts/NGP.sol:NGP",
        "label": "unWithDrawAmount",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1305,
        "contract": "contracts/NGP.sol:NGP",
        "label": "rankWithdrawAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1309,
        "contract": "contracts/NGP.sol:NGP",
        "label": "minters",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1311,
        "contract": "contracts/NGP.sol:NGP",
        "label": "spendNonce",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 1315,
        "contract": "contracts/NGP.sol:NGP",
        "label": "isOwner",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1318,
        "contract": "contracts/NGP.sol:NGP",
        "label": "owners",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1320,
        "contract": "contracts/NGP.sol:NGP",
        "label": "required",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 1322,
        "contract": "contracts/NGP.sol:NGP",
        "label": "genesisTs",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 1324,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeMinters",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 1326,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeNumbers",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 1328,
        "contract": "contracts/NGP.sol:NGP",
        "label": "claimMints",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 1330,
        "contract": "contracts/NGP.sol:NGP",
        "label": "maxMeshHeats",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 1332,
        "contract": "contracts/NGP.sol:NGP",
        "label": "destructions",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 1334,
        "contract": "contracts/NGP.sol:NGP",
        "label": "SECONDS_IN_DAY",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 1343,
        "contract": "contracts/NGP.sol:NGP",
        "label": "apy",
        "offset": 0,
        "slot": "121",
        "type": "t_uint256"
      },
      {
        "astId": 1345,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeStakes",
        "offset": 0,
        "slot": "122",
        "type": "t_uint256"
      },
      {
        "astId": 1347,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalNGPStaked",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 1349,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalEarn",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      },
      {
        "astId": 1354,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userStakes",
        "offset": 0,
        "slot": "125",
        "type": "t_mapping(t_address,t_struct(StakeInfo)1341_storage)"
      },
      {
        "astId": 1358,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaims",
        "offset": 0,
        "slot": "126",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1362,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaimed",
        "offset": 0,
        "slot": "127",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1364,
        "contract": "contracts/NGP.sol:NGP",
        "label": "treasuryValue",
        "offset": 0,
        "slot": "128",
        "type": "t_uint256"
      },
      {
        "astId": 1366,
        "contract": "contracts/NGP.sol:NGP",
        "label": "FoundationAddr",
        "offset": 0,
        "slot": "129",
        "type": "t_address"
      },
      {
        "astId": 1370,
        "contract": "contracts/NGP.sol:NGP",
        "label": "stakeValues",
        "offset": 0,
        "slot": "130",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1374,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayReceived",
        "offset": 0,
        "slot": "131",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1378,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayStaked",
        "offset": 0,
        "slot": "132",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1382,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayUnStaked",
        "offset": 0,
        "slot": "133",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1386,
        "contract": "contracts/NGP.sol:NGP",
        "label": "unWithdraws",
        "offset": 0,
        "slot": "134",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1390,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userWithdraws",
        "offset": 0,
        "slot": "135",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1396,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalWithDraws",
        "offset": 0,
        "slot": "136",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1402,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalUnWithDraws",
        "offset": 0,
        "slot": "137",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1408,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayReceivedAmount",
        "offset": 0,
        "slot": "138",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(MintInfo)1270_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct NGP.MintInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(MintInfo)1270_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(StakeInfo)1341_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NGP.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)1341_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MintInfo)1270_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NGP.MintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MintInfo)1270_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintInfo)1270_storage": {
        "encoding": "inplace",
        "label": "struct NGP.MintInfo",
        "members": [
          {
            "astId": 1263,
            "contract": "contracts/NGP.sol:NGP",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1265,
            "contract": "contracts/NGP.sol:NGP",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1267,
            "contract": "contracts/NGP.sol:NGP",
            "label": "updateTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1269,
            "contract": "contracts/NGP.sol:NGP",
            "label": "withdrawTs",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakeInfo)1341_storage": {
        "encoding": "inplace",
        "label": "struct NGP.StakeInfo",
        "members": [
          {
            "astId": 1336,
            "contract": "contracts/NGP.sol:NGP",
            "label": "term",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1338,
            "contract": "contracts/NGP.sol:NGP",
            "label": "maturityTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1340,
            "contract": "contracts/NGP.sol:NGP",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}